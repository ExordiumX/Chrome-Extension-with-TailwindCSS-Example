{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,GAAM;;;ACAN,KAAK,CAAC,gBAAgB,IAAG,GAAG,GAAI,GAAG,CAAC,OAAO,EAAE,OAAO,GAChD,GAAG,CAAC,YAAY,GAAI,WAAW,EAAE,OAAO,GACpC,OAAO,CAAC,GAAG,CAAE,OAAO,CAAC,MAAM,EAAE,CAAC,GAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAM,CAAG;cAAE,GAAG,EAAE,CAAC,GACvD,CAAC,CAAC,WAAW,GACP,gBAAgB,CAAE,CAAC,IACnB,GAAG,CAAC,OAAO,EAAE,QAAO,GAAI,CAAC,CAAC,IAAI,CAAE,QAAO;;eAEhD,IAAI,EAAE,KAAK,MAAO,MAAM,IAAK,KAAK;cAClC,IAAI,CAAE,OAAO;;;;AAItB,KAAK,CAAC,4BAA4B,IAAG,GAAG,GAChC,gBAAgB,CAAE,GAAG,EAAE,IAAI,EAAE,KAAK,GAC9B,KAAK,CAAC,GAAG,EAAE,CAAC,GAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,gBAAgB;UAAE,IAAI;;;AAE7D,KAAK,CAAC,YAAY,IAAI,GAAG,EAAE,aAAa,GAAK,CAAC;IAC1C,4BAA4B,CAAE,GAAG,EAAE,IAAI,EAAE,SAAS,GAAI,CAAC;QACnD,EAAE,GAAG,aAAa,IAAK,aAAa,KAAK,SAAS,EAC9C,UAAU,KAAQ,YAAY,CAAE,GAAG,EAAE,SAAS;UAAG,IAAI,CAAE,CAAiB,AAAjB,EAAiB,AAAjB,eAAiB;;aAExE,MAAM,CAAC,OAAO,CAAC,MAAM;IAE7B,CAAC;AACL,CAAC;AAED,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,GAAI,CAAC;IAChC,EAAE,EAAE,IAAI,CAAC,WAAW,MAAK,WAAa,GAAE,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,wBAAwB,EAAE,GAAG,GAAI,YAAY,CAAE,GAAG;;QACjE,MAAM,CAAC,IAAI,CAAC,KAAK;YAAI,MAAM,EAAE,IAAI;YAAE,iBAAiB,EAAE,IAAI;YAAI,IAAI,GAAI,CAAC;YACnE,EAAE,EAAE,IAAI,CAAC,CAAC,GACN,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,CAAC,EAAE,EAAE;QAEtC,CAAC;IACL,CAAC;AACL,CAAC","sources":["src/background.js","node_modules/crx-hotreload/hot-reload.js"],"sourcesContent":["import \"crx-hotreload\";\r\n","const filesInDirectory = dir => new Promise (resolve =>\n    dir.createReader ().readEntries (entries =>\n        Promise.all (entries.filter (e => e.name[0] !== '.').map (e =>\n            e.isDirectory\n                ? filesInDirectory (e)\n                : new Promise (resolve => e.file (resolve))\n        ))\n        .then (files => [].concat (...files))\n        .then (resolve)\n    )\n)\n\nconst timestampForFilesInDirectory = dir =>\n        filesInDirectory (dir).then (files =>\n            files.map (f => f.name + f.lastModifiedDate).join ())\n\nconst watchChanges = (dir, lastTimestamp) => {\n    timestampForFilesInDirectory (dir).then (timestamp => {\n        if (!lastTimestamp || (lastTimestamp === timestamp)) {\n            setTimeout (() => watchChanges (dir, timestamp), 1000) // retry after 1s\n        } else {\n            chrome.runtime.reload ()\n        }\n    })\n}\n\nchrome.management.getSelf (self => {\n    if (self.installType === 'development') {\n        chrome.runtime.getPackageDirectoryEntry (dir => watchChanges (dir))\n        chrome.tabs.query ({ active: true, lastFocusedWindow: true }, tabs => { // NB: see https://github.com/xpl/crx-hotreload/issues/5\n            if (tabs[0]) {\n                chrome.tabs.reload (tabs[0].id)\n            }\n        })\n    }\n})\n"],"names":[],"version":3,"file":"background.js.map","sourceRoot":"../"}